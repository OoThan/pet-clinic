version: 2.1

jobs:
  build:
    docker:

#      - image: circleci/mysql:latest-ram
#          environment:
#              - MYSQL_ROOT_PASSWORD: Hongqi9!@@
#              - MYSQL_DATABASE: pet_clinic
#              - MYSQL_USER: root
#              - MYSQL_PASSWORD: Hongqi9!@@

      - image: circleci/openjdk:11-browsers-legacy
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd

    working_directory: ~/repo

    environment:
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
            nc -z 127.0.0.1 3306 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI; Import dummy data; run an example query
          command: |
            sudo apt-get update
            sudo apt-get install mysql*
            mysql -h 127.0.0.1 -u root -prootpw --execute="use test_db;"
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-

      - run: mvn install -DskipTests

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2

          key: v1-dependencies-{{ checksum "pom.xm" }}

      - run: mvn integration-test

#services:
#  docker-mysql:
#    image: mysql:5.7
#    environment:
#      - MYSQL_ROOT_PASSWORD=root
#      - MYSQL_DATABASE=pet_clinic
#      - MYSQL_USER=root
#      - MYSQL_PASSWORD=root
#    ports:
#      - 3307:3306
#
#  app:
#    image: app:latest
#    ports:
#      - 8091:8091
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://docker-mysql:3306/pet_clinic?autoReconnect=true&useSSL=false
#    depends_on:
#      - docker-mysql


#orbs:
#  maven: circleci/maven@0.0.12
#
#workflows:
#  maven_test:
#    jobs:
#      - maven/test # checkout, build, test, and upload test results